console.log("main.js loaded successfully!");

const game = new Game();

console.log("init game:", game);

initBoard(game.matrix); //–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–æ—Å–∫–∏ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –∏–≥—Ä—ã
initStrategyMenu(game); //–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω—é, –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Å—Ç—Ä–µ—Ç–µ–≥–∏–∏

const cooperateBtn = document.querySelector("#cooperate-btn"); 
cooperateBtn.addEventListener("click", cooperate(game)); 

const defectBtn = document.querySelector("#defect-btn");
defectBtn.addEventListener("click", defect(game));

const guessBtn = document.querySelector("#guess-btn");
guessBtn.addEventListener("click", showStrategyMenu(game));

const closeGuessBtn = document.querySelector("#close-guess-btn");
closeGuessBtn.addEventListener("click", hideStrategyMenu);

const tryAgainBtn = document.querySelector("#try-again-btn");
tryAgainBtn.addEventListener("click", restartGame);


function initBoard(matrix) {
  const board = document.querySelector("#board");
  const fields = board.querySelectorAll(".field"); //–≤—ã–¥–µ–ª—è–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ .field

  Object.keys(matrix).forEach((key, index) => {
    const playerScore = document.createElement("span");
    const botScore = document.createElement("span");

    //—É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π –≤ –º–∞—Ç—Ä–∏—Ü–µ 
    playerScore.innerText = matrix[key][0];
    botScore.innerText = matrix[key][1];

    fields[index].appendChild(playerScore); 
    fields[index].appendChild(botScore);
  });
}

function initStrategyMenu(game) {
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ —Å–∫—Ä—ã—Ç–æ–≥–æ –º–µ–Ω—é, –≤ –∫–æ—Ç–æ—Ä–æ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ (–ø–æ—è–≤–ª—è–µ—Ç—Å—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ guess strategy btn)
  const strategyMenu = document.querySelector("#strategy-menu");

  for (let key in game.strategies) {
    //–¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤ —Å–∫—Ä—ã—Ç–æ–≥–æ –º–µ–Ω—é, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ
    const strategy = document.createElement("div");
    const circle = document.createElement("div");
    const span = document.createElement("span");

    strategy.id = key;
    span.innerText = key;
    
    strategy.classList.add("strategy");
    circle.classList.add("circle");

    strategy.appendChild(circle);
    strategy.appendChild(span);
    strategy.addEventListener("click", selectStrategy(game));

    strategyMenu.appendChild(strategy);
  }
}

function selectStrategy(game) {
  /*
     –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–æ–º –æ—Ç–≤–µ—Ç–∞ –∏ –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏, –æ—Ç–æ–±—Ä–∞–∂—é—â–µ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç 
    */
  return (event) => {
    hideStrategyMenu();

    const strategyIndicator = document.querySelector("#strategy-indicator");
    const correctStrategy = document.querySelector("#correct-strategy");

    const strategyID = event.currentTarget.id;

    const correct = game.guessStrategy(strategyID);

    strategyIndicator.innerText = correct ? "correct üôÇ" : "incorrect üôÅ";
    correctStrategy.innerText = game.getBotStrategy();

    showStrategyResult();
  };
}

function showStrategyResult() {
  //–û–∫–Ω–æ, –æ—Ç–æ–±—Ä–∞–∂–∞—é—â–µ–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —É–≥–∞–¥—ã–≤–∞–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ (–æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –æ–∫–Ω–∞ –≤—ã–±–æ—Ä–∞ –∏ –∫–ª–∏–∫–∞ –Ω–∞ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤)
  const strategyResult = document.querySelector("#strategy-result");
  strategyResult.classList.add("show");
}

function cooperate(game) {
  /*
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ –∏–∑ –¥–≤—É—Ö –≤–æ–∑–º–æ–∂–Ω—ã–π –¥–µ–π—Å—Ç–≤–∏–π –∏–≥—Ä–æ–∫–∞, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–∏—Å—Ö–æ–¥—è—Ç –≤ –º–æ–º–µ–Ω—Ç –∫–ª–∏–∫–∞ –Ω–∞ + 
    */
  return () => {
    if (!game.isMovesLeft()) showGuessMsg();
    if (game.isFinished()) return;

    game.makePlayerMove("cooperate");
    updateScores(game.scores);
  };
}

function defect(game) {
  /*
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ –∏–∑ –¥–≤—É—Ö –≤–æ–∑–º–æ–∂–Ω—ã–π –¥–µ–π—Å—Ç–≤–∏–π –∏–≥—Ä–æ–∫–∞, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–∏—Å—Ö–æ–¥—è—Ç –≤ –º–æ–º–µ–Ω—Ç –∫–ª–∏–∫–∞ –Ω–∞ -
    */
  return () => {
    if (!game.isMovesLeft()) showGuessMsg();
    if (game.isFinished()) return;

    game.makePlayerMove("defect");
    updateScores(game.scores);
  };
}

function showGuessMsg() {
  /*
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—ã–±–æ—Ä–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —á–∏—Å–ª–∞ —Ö–æ–¥–æ–≤
    */
  const guessMsg = document.querySelector("#guess-msg");
  guessMsg.classList.add("show");
}

function updateScores(scores) {
  //–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç–∞ –∏–≥—Ä–æ–∫–∞ –∏ –±–æ—Ç–∞ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ö–æ–¥–∞
  document.querySelector("#player-score").innerHTML = scores.player;
  document.querySelector("#bot-score").innerHTML = scores.bot;
}

function showStrategyMenu(game) {
    /*
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –º–µ–Ω—é —Å–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏ –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ guess the strategy
    */
  return () => {
    if (game.isFinished()) return;

    const strategyMenu = document.getElementById("strategy-menu");
    strategyMenu.classList.add("show");
  };
}

function hideStrategyMenu() {
  /*
   –°–∫—Ä—ã–≤–∞–µ—Ç –º–µ–Ω—é —Å–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –æ—Ç–≤–µ—Ç–∞ –∏–≥—Ä–æ–∫–æ–º
    */
  const strategyMenu = document.getElementById("strategy-menu");
  strategyMenu.classList.remove("show");
}

function restartGame() {
  location.reload();
}
